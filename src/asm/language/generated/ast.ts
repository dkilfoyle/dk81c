/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const AsmTerminals = {
    ID: /[_a-zA-Z$][a-zA-Z0-9._]*/,
    EOL: /[\r\n]+/,
    COMMENT: /;[^\n\r]*/,
    NUMBER: /[\\-]?[0-9][0-9a-fA-F]*[h]?/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    WS: /[ \t]/,
};

export type AsmTerminalNames = keyof typeof AsmTerminals;

export type AsmKeywordNames =
    | "$"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "/"
    | ":"
    | "A"
    | "ADC"
    | "ADD"
    | "AF"
    | "AND"
    | "B"
    | "BC"
    | "BIT"
    | "C"
    | "CALL"
    | "CCF"
    | "CP"
    | "CPD"
    | "CPDR"
    | "CPI"
    | "CPIR"
    | "CPL"
    | "D"
    | "DAA"
    | "DE"
    | "DEC"
    | "DEFB"
    | "DEFW"
    | "DI"
    | "DJNZ"
    | "DS"
    | "E"
    | "EI"
    | "END"
    | "ENDIF"
    | "EQU"
    | "EX"
    | "EXX"
    | "F"
    | "H"
    | "HL"
    | "I"
    | "IF"
    | "IM"
    | "IN"
    | "INC"
    | "IND"
    | "INDR"
    | "INI"
    | "INIR"
    | "IX"
    | "IXH"
    | "IXL"
    | "IY"
    | "IYH"
    | "IYL"
    | "JP"
    | "JR"
    | "L"
    | "LD"
    | "LDD"
    | "LDDR"
    | "LDI"
    | "LDIR"
    | "NEG"
    | "NOP"
    | "OR"
    | "ORG"
    | "OTDR"
    | "OTIR"
    | "OUT"
    | "OUTD"
    | "OUTI"
    | "PC"
    | "POP"
    | "PUSH"
    | "R"
    | "RES"
    | "RET"
    | "RETI"
    | "RETN"
    | "RL"
    | "RLA"
    | "RLC"
    | "RLCA"
    | "RLD"
    | "RR"
    | "RRA"
    | "RRC"
    | "RRCA"
    | "RRD"
    | "RST"
    | "SBC"
    | "SCF"
    | "SET"
    | "SL1"
    | "SLA"
    | "SLL"
    | "SP"
    | "SRA"
    | "SRL"
    | "SUB"
    | "XOR";

export type AsmTokenNames = AsmTerminalNames | AsmKeywordNames;

export type ASSEMBLER_DIRECTIVE = 'DEFB' | 'DEFW' | 'DS' | 'END' | 'ENDIF' | 'EQU' | 'IF' | 'ORG' | 'SET';

export function isASSEMBLER_DIRECTIVE(item: unknown): item is ASSEMBLER_DIRECTIVE {
    return item === 'ORG' || item === 'END' || item === 'EQU' || item === 'DEFB' || item === 'DEFW' || item === 'DS' || item === 'IF' || item === 'ENDIF' || item === 'SET';
}

export interface BinaryExpression extends Expression {
    readonly $type: 'BinaryExpression';
    left: Expression;
    operator: '*' | '+' | '-' | '/';
    right: Expression;
}

export const BinaryExpression = {
    $type: 'BinaryExpression',
    dollar: 'dollar',
    immediate: 'immediate',
    label: 'label',
    left: 'left',
    operator: 'operator',
    paren: 'paren',
    register: 'register',
    right: 'right',
    string: 'string'
} as const;

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression.$type);
}

export interface Directive extends langium.AstNode {
    readonly $container: Line;
    readonly $type: 'Directive';
    directive: ASSEMBLER_DIRECTIVE;
    expressionList: ExpressionList;
    name?: string;
}

export const Directive = {
    $type: 'Directive',
    directive: 'directive',
    expressionList: 'expressionList',
    name: 'name'
} as const;

export function isDirective(item: unknown): item is Directive {
    return reflection.isInstance(item, Directive.$type);
}

export interface Expression extends langium.AstNode {
    readonly $type: 'BinaryExpression' | 'Expression';
    dollar?: '$';
    immediate?: number;
    label?: langium.Reference<Label>;
    paren?: Expression;
    register?: REGISTER;
    string?: string;
}

export const Expression = {
    $type: 'Expression',
    dollar: 'dollar',
    immediate: 'immediate',
    label: 'label',
    paren: 'paren',
    register: 'register',
    string: 'string'
} as const;

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression.$type);
}

export interface ExpressionList extends langium.AstNode {
    readonly $container: Directive | Instruction;
    readonly $type: 'ExpressionList';
    expressions: Array<Expression>;
}

export const ExpressionList = {
    $type: 'ExpressionList',
    expressions: 'expressions'
} as const;

export function isExpressionList(item: unknown): item is ExpressionList {
    return reflection.isInstance(item, ExpressionList.$type);
}

export interface Instruction extends langium.AstNode {
    readonly $container: Line;
    readonly $type: 'Instruction';
    expressionList?: ExpressionList;
    opcode: OPCODE;
}

export const Instruction = {
    $type: 'Instruction',
    expressionList: 'expressionList',
    opcode: 'opcode'
} as const;

export function isInstruction(item: unknown): item is Instruction {
    return reflection.isInstance(item, Instruction.$type);
}

export interface Label extends langium.AstNode {
    readonly $container: Line;
    readonly $type: 'Label';
    name: string;
}

export const Label = {
    $type: 'Label',
    name: 'name'
} as const;

export function isLabel(item: unknown): item is Label {
    return reflection.isInstance(item, Label.$type);
}

export interface Line extends langium.AstNode {
    readonly $container: Program;
    readonly $type: 'Line';
    comment?: string;
    directive?: Directive;
    instruction?: Instruction;
    label?: Label;
}

export const Line = {
    $type: 'Line',
    comment: 'comment',
    directive: 'directive',
    instruction: 'instruction',
    label: 'label'
} as const;

export function isLine(item: unknown): item is Line {
    return reflection.isInstance(item, Line.$type);
}

export type OPCODE = 'ADC' | 'ADD' | 'AND' | 'BIT' | 'CALL' | 'CCF' | 'CP' | 'CPD' | 'CPDR' | 'CPI' | 'CPIR' | 'CPL' | 'DAA' | 'DEC' | 'DI' | 'DJNZ' | 'EI' | 'EX' | 'EXX' | 'IM' | 'IN' | 'INC' | 'IND' | 'INDR' | 'INI' | 'INIR' | 'JP' | 'JR' | 'LD' | 'LDD' | 'LDDR' | 'LDI' | 'LDIR' | 'NEG' | 'NOP' | 'OR' | 'OTDR' | 'OTIR' | 'OUT' | 'OUTD' | 'OUTI' | 'POP' | 'PUSH' | 'RES' | 'RET' | 'RETI' | 'RETN' | 'RL' | 'RLA' | 'RLC' | 'RLCA' | 'RLD' | 'RR' | 'RRA' | 'RRC' | 'RRCA' | 'RRD' | 'RST' | 'SBC' | 'SCF' | 'SL1' | 'SLA' | 'SLL' | 'SRA' | 'SRL' | 'SUB' | 'XOR';

export function isOPCODE(item: unknown): item is OPCODE {
    return item === 'ADC' || item === 'ADD' || item === 'AND' || item === 'BIT' || item === 'CALL' || item === 'CCF' || item === 'CP' || item === 'CPD' || item === 'CPDR' || item === 'CPI' || item === 'CPIR' || item === 'CPL' || item === 'DAA' || item === 'DEC' || item === 'DI' || item === 'DJNZ' || item === 'EI' || item === 'EX' || item === 'EXX' || item === 'IM' || item === 'IN' || item === 'INC' || item === 'IND' || item === 'INDR' || item === 'INI' || item === 'INIR' || item === 'JP' || item === 'JR' || item === 'LD' || item === 'LDD' || item === 'LDDR' || item === 'LDI' || item === 'LDIR' || item === 'NEG' || item === 'NOP' || item === 'OR' || item === 'OTDR' || item === 'OTIR' || item === 'OUT' || item === 'OUTD' || item === 'OUTI' || item === 'POP' || item === 'PUSH' || item === 'RES' || item === 'RET' || item === 'RETI' || item === 'RETN' || item === 'RL' || item === 'RLA' || item === 'RLC' || item === 'RLCA' || item === 'RLD' || item === 'RR' || item === 'RRA' || item === 'RRC' || item === 'RRCA' || item === 'RRD' || item === 'RST' || item === 'SBC' || item === 'SCF' || item === 'SLA' || item === 'SLL' || item === 'SL1' || item === 'SRA' || item === 'SRL' || item === 'SUB' || item === 'XOR';
}

export interface Program extends langium.AstNode {
    readonly $type: 'Program';
    lines: Array<Line>;
}

export const Program = {
    $type: 'Program',
    lines: 'lines'
} as const;

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program.$type);
}

export type REGISTER = 'A' | 'AF' | 'B' | 'BC' | 'C' | 'D' | 'DE' | 'E' | 'F' | 'H' | 'HL' | 'I' | 'IX' | 'IXH' | 'IXL' | 'IY' | 'IYH' | 'IYL' | 'L' | 'PC' | 'R' | 'SP';

export function isREGISTER(item: unknown): item is REGISTER {
    return item === 'A' || item === 'B' || item === 'C' || item === 'D' || item === 'E' || item === 'F' || item === 'H' || item === 'L' || item === 'I' || item === 'R' || item === 'IXH' || item === 'IXL' || item === 'IYH' || item === 'IYL' || item === 'AF' || item === 'BC' || item === 'DE' || item === 'HL' || item === 'PC' || item === 'SP' || item === 'IX' || item === 'IY';
}

export type AsmAstType = {
    BinaryExpression: BinaryExpression
    Directive: Directive
    Expression: Expression
    ExpressionList: ExpressionList
    Instruction: Instruction
    Label: Label
    Line: Line
    Program: Program
}

export class AsmAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        BinaryExpression: {
            name: BinaryExpression.$type,
            properties: {
                dollar: {
                    name: BinaryExpression.dollar
                },
                immediate: {
                    name: BinaryExpression.immediate
                },
                label: {
                    name: BinaryExpression.label,
                    referenceType: Label.$type
                },
                left: {
                    name: BinaryExpression.left
                },
                operator: {
                    name: BinaryExpression.operator
                },
                paren: {
                    name: BinaryExpression.paren
                },
                register: {
                    name: BinaryExpression.register
                },
                right: {
                    name: BinaryExpression.right
                },
                string: {
                    name: BinaryExpression.string
                }
            },
            superTypes: [Expression.$type]
        },
        Directive: {
            name: Directive.$type,
            properties: {
                directive: {
                    name: Directive.directive
                },
                expressionList: {
                    name: Directive.expressionList
                },
                name: {
                    name: Directive.name
                }
            },
            superTypes: []
        },
        Expression: {
            name: Expression.$type,
            properties: {
                dollar: {
                    name: Expression.dollar
                },
                immediate: {
                    name: Expression.immediate
                },
                label: {
                    name: Expression.label,
                    referenceType: Label.$type
                },
                paren: {
                    name: Expression.paren
                },
                register: {
                    name: Expression.register
                },
                string: {
                    name: Expression.string
                }
            },
            superTypes: []
        },
        ExpressionList: {
            name: ExpressionList.$type,
            properties: {
                expressions: {
                    name: ExpressionList.expressions,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Instruction: {
            name: Instruction.$type,
            properties: {
                expressionList: {
                    name: Instruction.expressionList
                },
                opcode: {
                    name: Instruction.opcode
                }
            },
            superTypes: []
        },
        Label: {
            name: Label.$type,
            properties: {
                name: {
                    name: Label.name
                }
            },
            superTypes: []
        },
        Line: {
            name: Line.$type,
            properties: {
                comment: {
                    name: Line.comment
                },
                directive: {
                    name: Line.directive
                },
                instruction: {
                    name: Line.instruction
                },
                label: {
                    name: Line.label
                }
            },
            superTypes: []
        },
        Program: {
            name: Program.$type,
            properties: {
                lines: {
                    name: Program.lines,
                    defaultValue: []
                }
            },
            superTypes: []
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new AsmAstReflection();
