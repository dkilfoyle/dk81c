/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

import type { Grammar } from 'langium';
import { loadGrammarFromJson } from 'langium';

let loadedAsmGrammar: Grammar | undefined;
export const AsmGrammar = (): Grammar => loadedAsmGrammar ?? (loadedAsmGrammar = loadGrammarFromJson(`{
  "$type": "Grammar",
  "isDeclared": true,
  "name": "Asm",
  "rules": [
    {
      "$type": "ParserRule",
      "entry": true,
      "name": "Program",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "lines",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@1"
              },
              "arguments": []
            }
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@14"
                },
                "arguments": [],
                "cardinality": "+"
              },
              {
                "$type": "EndOfFile"
              }
            ]
          }
        ],
        "cardinality": "*"
      },
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Line",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "label",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@2"
                  },
                  "arguments": []
                },
                "cardinality": "?"
              },
              {
                "$type": "Alternatives",
                "elements": [
                  {
                    "$type": "Assignment",
                    "feature": "instruction",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@3"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "$type": "Assignment",
                    "feature": "directive",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$ref": "#/rules@4"
                      },
                      "arguments": []
                    }
                  }
                ]
              },
              {
                "$type": "Assignment",
                "feature": "comment",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@15"
                  },
                  "arguments": []
                },
                "cardinality": "?"
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "label",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@2"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Assignment",
                "feature": "comment",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@15"
                  },
                  "arguments": []
                },
                "cardinality": "?"
              }
            ]
          },
          {
            "$type": "Assignment",
            "feature": "comment",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@15"
              },
              "arguments": []
            }
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Label",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@9"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ":"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Instruction",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "opcode",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@13"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "expressionList",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@5"
              },
              "arguments": []
            },
            "cardinality": "?"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Directive",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@9"
              },
              "arguments": []
            },
            "cardinality": "?"
          },
          {
            "$type": "Assignment",
            "feature": "directive",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@12"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "expressionList",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@5"
              },
              "arguments": []
            }
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "ExpressionList",
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "expressions",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@6"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "expressions",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@6"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Expression",
      "definition": {
        "$type": "RuleCall",
        "rule": {
          "$ref": "#/rules@7"
        },
        "arguments": []
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "InfixRule",
      "name": "BinaryExpression",
      "call": {
        "$type": "RuleCall",
        "rule": {
          "$ref": "#/rules@8"
        },
        "arguments": []
      },
      "operators": {
        "$type": "InfixRuleOperators",
        "precedences": [
          {
            "$type": "InfixRuleOperatorList",
            "operators": [
              {
                "$type": "Keyword",
                "value": "*"
              },
              {
                "$type": "Keyword",
                "value": "/"
              }
            ]
          },
          {
            "$type": "InfixRuleOperatorList",
            "operators": [
              {
                "$type": "Keyword",
                "value": "+"
              },
              {
                "$type": "Keyword",
                "value": "-"
              }
            ]
          }
        ]
      },
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "Argument",
      "inferredType": {
        "$type": "InferredType",
        "name": "Expression"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "condition",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@10"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "immediate",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@16"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "register",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@11"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "label",
            "operator": "=",
            "terminal": {
              "$type": "CrossReference",
              "type": {
                "$ref": "#/rules@2"
              },
              "terminal": {
                "$type": "RuleCall",
                "rule": {
                  "$ref": "#/rules@9"
                },
                "arguments": []
              },
              "deprecatedSyntax": false,
              "isMulti": false
            }
          },
          {
            "$type": "Assignment",
            "feature": "dollar",
            "operator": "=",
            "terminal": {
              "$type": "Keyword",
              "value": "$"
            }
          },
          {
            "$type": "Assignment",
            "feature": "string",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$ref": "#/rules@18"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": "("
              },
              {
                "$type": "Assignment",
                "feature": "paren",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$ref": "#/rules@6"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Keyword",
                "value": ")"
              }
            ]
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "TerminalRule",
      "name": "ID",
      "definition": {
        "$type": "RegexToken",
        "regex": "/[_a-zA-Z][a-zA-Z0-9._]*/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "ParserRule",
      "name": "JUMPCONDITION",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "NC"
          },
          {
            "$type": "Keyword",
            "value": "NZ"
          },
          {
            "$type": "Keyword",
            "value": "Z"
          },
          {
            "$type": "Keyword",
            "value": "M"
          },
          {
            "$type": "Keyword",
            "value": "PE"
          },
          {
            "$type": "Keyword",
            "value": "PO"
          },
          {
            "$type": "Keyword",
            "value": "P"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "REGISTER",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "A"
          },
          {
            "$type": "Keyword",
            "value": "B"
          },
          {
            "$type": "Keyword",
            "value": "C"
          },
          {
            "$type": "Keyword",
            "value": "D"
          },
          {
            "$type": "Keyword",
            "value": "E"
          },
          {
            "$type": "Keyword",
            "value": "F"
          },
          {
            "$type": "Keyword",
            "value": "H"
          },
          {
            "$type": "Keyword",
            "value": "L"
          },
          {
            "$type": "Keyword",
            "value": "I"
          },
          {
            "$type": "Keyword",
            "value": "R"
          },
          {
            "$type": "Keyword",
            "value": "IXH"
          },
          {
            "$type": "Keyword",
            "value": "IXL"
          },
          {
            "$type": "Keyword",
            "value": "IYH"
          },
          {
            "$type": "Keyword",
            "value": "IYL"
          },
          {
            "$type": "Keyword",
            "value": "AF"
          },
          {
            "$type": "Keyword",
            "value": "BC"
          },
          {
            "$type": "Keyword",
            "value": "DE"
          },
          {
            "$type": "Keyword",
            "value": "HL"
          },
          {
            "$type": "Keyword",
            "value": "PC"
          },
          {
            "$type": "Keyword",
            "value": "SP"
          },
          {
            "$type": "Keyword",
            "value": "IX"
          },
          {
            "$type": "Keyword",
            "value": "IY"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "ASSEMBLER_DIRECTIVE",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "ORG"
          },
          {
            "$type": "Keyword",
            "value": "END"
          },
          {
            "$type": "Keyword",
            "value": "EQU"
          },
          {
            "$type": "Keyword",
            "value": "DEFB"
          },
          {
            "$type": "Keyword",
            "value": "DB"
          },
          {
            "$type": "Keyword",
            "value": "DEFW"
          },
          {
            "$type": "Keyword",
            "value": "DW"
          },
          {
            "$type": "Keyword",
            "value": "DEFS"
          },
          {
            "$type": "Keyword",
            "value": "DS"
          },
          {
            "$type": "Keyword",
            "value": "IF"
          },
          {
            "$type": "Keyword",
            "value": "ENDIF"
          },
          {
            "$type": "Keyword",
            "value": "SET"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "ParserRule",
      "name": "OPCODE",
      "dataType": "string",
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Keyword",
            "value": "ADC"
          },
          {
            "$type": "Keyword",
            "value": "ADD"
          },
          {
            "$type": "Keyword",
            "value": "AND"
          },
          {
            "$type": "Keyword",
            "value": "BIT"
          },
          {
            "$type": "Keyword",
            "value": "CALL"
          },
          {
            "$type": "Keyword",
            "value": "CCF"
          },
          {
            "$type": "Keyword",
            "value": "CP"
          },
          {
            "$type": "Keyword",
            "value": "CPD"
          },
          {
            "$type": "Keyword",
            "value": "CPDR"
          },
          {
            "$type": "Keyword",
            "value": "CPI"
          },
          {
            "$type": "Keyword",
            "value": "CPIR"
          },
          {
            "$type": "Keyword",
            "value": "CPL"
          },
          {
            "$type": "Keyword",
            "value": "DAA"
          },
          {
            "$type": "Keyword",
            "value": "DEC"
          },
          {
            "$type": "Keyword",
            "value": "DI"
          },
          {
            "$type": "Keyword",
            "value": "DJNZ"
          },
          {
            "$type": "Keyword",
            "value": "EI"
          },
          {
            "$type": "Keyword",
            "value": "EX"
          },
          {
            "$type": "Keyword",
            "value": "EXX"
          },
          {
            "$type": "Keyword",
            "value": "IM"
          },
          {
            "$type": "Keyword",
            "value": "IN"
          },
          {
            "$type": "Keyword",
            "value": "INC"
          },
          {
            "$type": "Keyword",
            "value": "IND"
          },
          {
            "$type": "Keyword",
            "value": "INDR"
          },
          {
            "$type": "Keyword",
            "value": "INI"
          },
          {
            "$type": "Keyword",
            "value": "INIR"
          },
          {
            "$type": "Keyword",
            "value": "JP"
          },
          {
            "$type": "Keyword",
            "value": "JR"
          },
          {
            "$type": "Keyword",
            "value": "LD"
          },
          {
            "$type": "Keyword",
            "value": "LDD"
          },
          {
            "$type": "Keyword",
            "value": "LDDR"
          },
          {
            "$type": "Keyword",
            "value": "LDI"
          },
          {
            "$type": "Keyword",
            "value": "LDIR"
          },
          {
            "$type": "Keyword",
            "value": "NEG"
          },
          {
            "$type": "Keyword",
            "value": "NOP"
          },
          {
            "$type": "Keyword",
            "value": "OR"
          },
          {
            "$type": "Keyword",
            "value": "OTDR"
          },
          {
            "$type": "Keyword",
            "value": "OTIR"
          },
          {
            "$type": "Keyword",
            "value": "OUT"
          },
          {
            "$type": "Keyword",
            "value": "OUTD"
          },
          {
            "$type": "Keyword",
            "value": "OUTI"
          },
          {
            "$type": "Keyword",
            "value": "POP"
          },
          {
            "$type": "Keyword",
            "value": "PUSH"
          },
          {
            "$type": "Keyword",
            "value": "RES"
          },
          {
            "$type": "Keyword",
            "value": "RET"
          },
          {
            "$type": "Keyword",
            "value": "RETI"
          },
          {
            "$type": "Keyword",
            "value": "RETN"
          },
          {
            "$type": "Keyword",
            "value": "RL"
          },
          {
            "$type": "Keyword",
            "value": "RLA"
          },
          {
            "$type": "Keyword",
            "value": "RLC"
          },
          {
            "$type": "Keyword",
            "value": "RLCA"
          },
          {
            "$type": "Keyword",
            "value": "RLD"
          },
          {
            "$type": "Keyword",
            "value": "RR"
          },
          {
            "$type": "Keyword",
            "value": "RRA"
          },
          {
            "$type": "Keyword",
            "value": "RRC"
          },
          {
            "$type": "Keyword",
            "value": "RRCA"
          },
          {
            "$type": "Keyword",
            "value": "RRD"
          },
          {
            "$type": "Keyword",
            "value": "RST"
          },
          {
            "$type": "Keyword",
            "value": "SBC"
          },
          {
            "$type": "Keyword",
            "value": "SCF"
          },
          {
            "$type": "Keyword",
            "value": "SLA"
          },
          {
            "$type": "Keyword",
            "value": "SLL"
          },
          {
            "$type": "Keyword",
            "value": "SL1"
          },
          {
            "$type": "Keyword",
            "value": "SRA"
          },
          {
            "$type": "Keyword",
            "value": "SRL"
          },
          {
            "$type": "Keyword",
            "value": "SUB"
          },
          {
            "$type": "Keyword",
            "value": "XOR"
          }
        ]
      },
      "entry": false,
      "fragment": false,
      "parameters": []
    },
    {
      "$type": "TerminalRule",
      "name": "EOL",
      "definition": {
        "$type": "RegexToken",
        "regex": "/[\\\\r\\\\n]+/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "COMMENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "/;[^\\\\n\\\\r]*/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "NUMBER",
      "type": {
        "$type": "ReturnType",
        "name": "number"
      },
      "definition": {
        "$type": "RegexToken",
        "regex": "/[\\\\\\\\$]?[0-9A-Fa-f]+[Hh]?/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "CHARACTER",
      "definition": {
        "$type": "RegexToken",
        "regex": "/'[ -~]'/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "STRING",
      "definition": {
        "$type": "RegexToken",
        "regex": "/\\"(\\\\\\\\.|[^\\"\\\\\\\\])*\\"|'(\\\\\\\\.|[^'\\\\\\\\])*'/",
        "parenthesized": false
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "WS",
      "definition": {
        "$type": "RegexToken",
        "regex": "/[ \\\\t]/",
        "parenthesized": false
      },
      "fragment": false
    }
  ],
  "imports": [],
  "interfaces": [],
  "types": []
}`));
