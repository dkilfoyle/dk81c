/******************************************************************************
 * This file was generated by langium-cli 4.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const ZxbasicTerminals = {
    EOL: /[\r\n]+/,
    WS: /[ \t]+/,
    REM: /REM [^\n\r]*/,
    COMMENT: /#[^\n\r]*/,
    STRID: /[A-Z]\$/,
    NUMID: /[A-Z][A-Z0-9]*/,
    FLOAT: /[0-9]+\.[0-9]+/,
    INTEGER: /[0-9]+(?!\.)/,
    RAWSTRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
};

export type ZxbasicTerminalNames = keyof typeof ZxbasicTerminals;

export type ZxbasicKeywordNames =
    | "("
    | ")"
    | "*"
    | "**"
    | "+"
    | ","
    | "-"
    | "/"
    | ";"
    | "<"
    | "<="
    | "<>"
    | "="
    | ">"
    | ">="
    | "ABS"
    | "ACS"
    | "AND"
    | "ASN"
    | "AT"
    | "ATN"
    | "CHR$"
    | "CLEAR"
    | "CLS"
    | "CODE"
    | "CONT"
    | "COPY"
    | "COS"
    | "DIM"
    | "EXP"
    | "FAST"
    | "FOR"
    | "GOSUB"
    | "GOTO"
    | "IF"
    | "INKEY$"
    | "INPUT"
    | "INT"
    | "LEN"
    | "LET"
    | "LN"
    | "LPRINT"
    | "NEXT"
    | "NOT"
    | "OR"
    | "PAUSE"
    | "PEEK"
    | "PI"
    | "PLOT"
    | "POKE"
    | "PRINT"
    | "RAND"
    | "RETURN"
    | "RND"
    | "RUN"
    | "SCROLL"
    | "SGN"
    | "SIN"
    | "SLOW"
    | "SQR"
    | "STEP"
    | "STOP"
    | "STR$"
    | "TAB"
    | "TAN"
    | "THEN"
    | "TO"
    | "UNPLOT"
    | "USR"
    | "VAL";

export type ZxbasicTokenNames = ZxbasicTerminalNames | ZxbasicKeywordNames;

export interface BinaryExpression extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'BinaryExpression';
    left: Expression;
    operator: '*' | '**' | '+' | '-' | '/' | '<' | '<=' | '<>' | '=' | '>' | '>=' | 'AND' | 'OR';
    right: Expression;
}

export const BinaryExpression = {
    $type: 'BinaryExpression',
    left: 'left',
    operator: 'operator',
    right: 'right'
} as const;

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression.$type);
}

export type Expression = BinaryExpression | NumericLiteral | NumericVariable | ParenExpression | StringLiteral | StringVariable | SysFunctionCall | UnaryExpression;

export const Expression = {
    $type: 'Expression'
} as const;

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression.$type);
}

export interface Line extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'Line';
    name: LineNum;
    statement: StatementAny;
}

export const Line = {
    $type: 'Line',
    name: 'name',
    statement: 'statement'
} as const;

export function isLine(item: unknown): item is Line {
    return reflection.isInstance(item, Line.$type);
}

export type LineNum = number;


export interface Model extends langium.AstNode {
    readonly $type: 'Model';
    lines: Array<Line>;
}

export const Model = {
    $type: 'Model',
    lines: 'lines'
} as const;

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model.$type);
}

export interface NumericLiteral extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'NumericLiteral';
    value: number;
}

export const NumericLiteral = {
    $type: 'NumericLiteral',
    value: 'value'
} as const;

export function isNumericLiteral(item: unknown): item is NumericLiteral {
    return reflection.isInstance(item, NumericLiteral.$type);
}

export interface NumericVariable extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'NumericVariable';
    indices: Array<Expression>;
    varname: langium.Reference<StatementDecl>;
}

export const NumericVariable = {
    $type: 'NumericVariable',
    indices: 'indices',
    varname: 'varname'
} as const;

export function isNumericVariable(item: unknown): item is NumericVariable {
    return reflection.isInstance(item, NumericVariable.$type);
}

export interface ParenExpression extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'ParenExpression';
    operand: Expression;
}

export const ParenExpression = {
    $type: 'ParenExpression',
    operand: 'operand'
} as const;

export function isParenExpression(item: unknown): item is ParenExpression {
    return reflection.isInstance(item, ParenExpression.$type);
}

export interface PrintAt extends langium.AstNode {
    readonly $container: StatementPrint;
    readonly $type: 'PrintAt';
    args: Array<Expression>;
    command: 'AT';
}

export const PrintAt = {
    $type: 'PrintAt',
    args: 'args',
    command: 'command'
} as const;

export function isPrintAt(item: unknown): item is PrintAt {
    return reflection.isInstance(item, PrintAt.$type);
}

export type PrintItem = Expression | PrintAt | PrintTab;

export const PrintItem = {
    $type: 'PrintItem'
} as const;

export function isPrintItem(item: unknown): item is PrintItem {
    return reflection.isInstance(item, PrintItem.$type);
}

export interface PrintTab extends langium.AstNode {
    readonly $container: StatementPrint;
    readonly $type: 'PrintTab';
    args: Array<Expression>;
    command: 'TAB';
}

export const PrintTab = {
    $type: 'PrintTab',
    args: 'args',
    command: 'command'
} as const;

export function isPrintTab(item: unknown): item is PrintTab {
    return reflection.isInstance(item, PrintTab.$type);
}

export type StatementAny = StatementDecl | StatementIf | StatementJump | StatementNext | StatementPrint | StatementRem | StatementSimple;

export const StatementAny = {
    $type: 'StatementAny'
} as const;

export function isStatementAny(item: unknown): item is StatementAny {
    return reflection.isInstance(item, StatementAny.$type);
}

export type StatementDecl = StatementDim | StatementFor | StatementInput | StatementLet;

export const StatementDecl = {
    $type: 'StatementDecl'
} as const;

export function isStatementDecl(item: unknown): item is StatementDecl {
    return reflection.isInstance(item, StatementDecl.$type);
}

export interface StatementDim extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementDim';
    command: 'DIM';
    dims: Array<Expression>;
    name: string;
}

export const StatementDim = {
    $type: 'StatementDim',
    command: 'command',
    dims: 'dims',
    name: 'name'
} as const;

export function isStatementDim(item: unknown): item is StatementDim {
    return reflection.isInstance(item, StatementDim.$type);
}

export interface StatementFor extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementFor';
    command: 'FOR';
    from: Expression;
    name: string;
    step?: Expression;
    to: Expression;
}

export const StatementFor = {
    $type: 'StatementFor',
    command: 'command',
    from: 'from',
    name: 'name',
    step: 'step',
    to: 'to'
} as const;

export function isStatementFor(item: unknown): item is StatementFor {
    return reflection.isInstance(item, StatementFor.$type);
}

export interface StatementIf extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementIf';
    command: 'IF';
    test: Expression;
    thenStatement: StatementAny;
}

export const StatementIf = {
    $type: 'StatementIf',
    command: 'command',
    test: 'test',
    thenStatement: 'thenStatement'
} as const;

export function isStatementIf(item: unknown): item is StatementIf {
    return reflection.isInstance(item, StatementIf.$type);
}

export interface StatementInput extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementInput';
    command: 'INPUT';
    indices: Array<Expression>;
    name: string;
}

export const StatementInput = {
    $type: 'StatementInput',
    command: 'command',
    indices: 'indices',
    name: 'name'
} as const;

export function isStatementInput(item: unknown): item is StatementInput {
    return reflection.isInstance(item, StatementInput.$type);
}

export interface StatementJump extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementJump';
    command: 'GOSUB' | 'GOTO';
    destExpr?: Expression;
    destLine?: langium.Reference<Line>;
}

export const StatementJump = {
    $type: 'StatementJump',
    command: 'command',
    destExpr: 'destExpr',
    destLine: 'destLine'
} as const;

export function isStatementJump(item: unknown): item is StatementJump {
    return reflection.isInstance(item, StatementJump.$type);
}

export interface StatementLet extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementLet';
    command: 'LET';
    indices: Array<Expression>;
    name: string;
    value: Expression;
}

export const StatementLet = {
    $type: 'StatementLet',
    command: 'command',
    indices: 'indices',
    name: 'name',
    value: 'value'
} as const;

export function isStatementLet(item: unknown): item is StatementLet {
    return reflection.isInstance(item, StatementLet.$type);
}

export interface StatementNext extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementNext';
    command: 'NEXT';
    varname: langium.Reference<StatementFor>;
}

export const StatementNext = {
    $type: 'StatementNext',
    command: 'command',
    varname: 'varname'
} as const;

export function isStatementNext(item: unknown): item is StatementNext {
    return reflection.isInstance(item, StatementNext.$type);
}

export interface StatementPrint extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementPrint';
    args: Array<',' | ';' | PrintItem>;
    command: 'LPRINT' | 'PRINT';
}

export const StatementPrint = {
    $type: 'StatementPrint',
    args: 'args',
    command: 'command'
} as const;

export function isStatementPrint(item: unknown): item is StatementPrint {
    return reflection.isInstance(item, StatementPrint.$type);
}

export interface StatementRem extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementRem';
    command: string;
}

export const StatementRem = {
    $type: 'StatementRem',
    command: 'command'
} as const;

export function isStatementRem(item: unknown): item is StatementRem {
    return reflection.isInstance(item, StatementRem.$type);
}

export interface StatementSimple extends langium.AstNode {
    readonly $container: Line | StatementIf;
    readonly $type: 'StatementSimple';
    args: Array<Expression>;
    command: 'CLEAR' | 'CLS' | 'CONT' | 'COPY' | 'FAST' | 'PAUSE' | 'PLOT' | 'POKE' | 'RAND' | 'RETURN' | 'RUN' | 'SCROLL' | 'SLOW' | 'STOP' | 'UNPLOT';
}

export const StatementSimple = {
    $type: 'StatementSimple',
    args: 'args',
    command: 'command'
} as const;

export function isStatementSimple(item: unknown): item is StatementSimple {
    return reflection.isInstance(item, StatementSimple.$type);
}

export interface StringLiteral extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'StringLiteral';
    value: string;
}

export const StringLiteral = {
    $type: 'StringLiteral',
    value: 'value'
} as const;

export function isStringLiteral(item: unknown): item is StringLiteral {
    return reflection.isInstance(item, StringLiteral.$type);
}

export interface StringSlicer extends langium.AstNode {
    readonly $container: StringVariable;
    readonly $type: 'StringSlicer';
    from?: Expression;
    to?: Expression;
}

export const StringSlicer = {
    $type: 'StringSlicer',
    from: 'from',
    to: 'to'
} as const;

export function isStringSlicer(item: unknown): item is StringSlicer {
    return reflection.isInstance(item, StringSlicer.$type);
}

export interface StringVariable extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'StringVariable';
    indices: Array<Expression>;
    slicer?: StringSlicer;
    varname: langium.Reference<StatementDecl>;
}

export const StringVariable = {
    $type: 'StringVariable',
    indices: 'indices',
    slicer: 'slicer',
    varname: 'varname'
} as const;

export function isStringVariable(item: unknown): item is StringVariable {
    return reflection.isInstance(item, StringVariable.$type);
}

export interface SysFunctionCall extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'SysFunctionCall';
    command: 'INKEY$' | 'PI' | 'RND';
}

export const SysFunctionCall = {
    $type: 'SysFunctionCall',
    command: 'command'
} as const;

export function isSysFunctionCall(item: unknown): item is SysFunctionCall {
    return reflection.isInstance(item, SysFunctionCall.$type);
}

export interface UnaryExpression extends langium.AstNode {
    readonly $container: BinaryExpression | NumericVariable | ParenExpression | PrintAt | PrintTab | StatementDim | StatementFor | StatementIf | StatementInput | StatementJump | StatementLet | StatementPrint | StatementSimple | StringSlicer | StringVariable | UnaryExpression;
    readonly $type: 'UnaryExpression';
    op: '+' | '-' | 'ABS' | 'ACS' | 'ASN' | 'ATN' | 'CHR$' | 'CODE' | 'COS' | 'EXP' | 'INT' | 'LEN' | 'LN' | 'NOT' | 'PEEK' | 'SGN' | 'SIN' | 'SQR' | 'STR$' | 'TAN' | 'USR' | 'VAL';
    operand: Expression;
}

export const UnaryExpression = {
    $type: 'UnaryExpression',
    op: 'op',
    operand: 'operand'
} as const;

export function isUnaryExpression(item: unknown): item is UnaryExpression {
    return reflection.isInstance(item, UnaryExpression.$type);
}

export type ZxbasicAstType = {
    BinaryExpression: BinaryExpression
    Expression: Expression
    Line: Line
    Model: Model
    NumericLiteral: NumericLiteral
    NumericVariable: NumericVariable
    ParenExpression: ParenExpression
    PrintAt: PrintAt
    PrintItem: PrintItem
    PrintTab: PrintTab
    StatementAny: StatementAny
    StatementDecl: StatementDecl
    StatementDim: StatementDim
    StatementFor: StatementFor
    StatementIf: StatementIf
    StatementInput: StatementInput
    StatementJump: StatementJump
    StatementLet: StatementLet
    StatementNext: StatementNext
    StatementPrint: StatementPrint
    StatementRem: StatementRem
    StatementSimple: StatementSimple
    StringLiteral: StringLiteral
    StringSlicer: StringSlicer
    StringVariable: StringVariable
    SysFunctionCall: SysFunctionCall
    UnaryExpression: UnaryExpression
}

export class ZxbasicAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        BinaryExpression: {
            name: BinaryExpression.$type,
            properties: {
                left: {
                    name: BinaryExpression.left
                },
                operator: {
                    name: BinaryExpression.operator
                },
                right: {
                    name: BinaryExpression.right
                }
            },
            superTypes: [Expression.$type]
        },
        Expression: {
            name: Expression.$type,
            properties: {
            },
            superTypes: [PrintItem.$type]
        },
        Line: {
            name: Line.$type,
            properties: {
                name: {
                    name: Line.name
                },
                statement: {
                    name: Line.statement
                }
            },
            superTypes: []
        },
        Model: {
            name: Model.$type,
            properties: {
                lines: {
                    name: Model.lines,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        NumericLiteral: {
            name: NumericLiteral.$type,
            properties: {
                value: {
                    name: NumericLiteral.value
                }
            },
            superTypes: [Expression.$type]
        },
        NumericVariable: {
            name: NumericVariable.$type,
            properties: {
                indices: {
                    name: NumericVariable.indices,
                    defaultValue: []
                },
                varname: {
                    name: NumericVariable.varname,
                    referenceType: StatementDecl.$type
                }
            },
            superTypes: [Expression.$type]
        },
        ParenExpression: {
            name: ParenExpression.$type,
            properties: {
                operand: {
                    name: ParenExpression.operand
                }
            },
            superTypes: [Expression.$type]
        },
        PrintAt: {
            name: PrintAt.$type,
            properties: {
                args: {
                    name: PrintAt.args,
                    defaultValue: []
                },
                command: {
                    name: PrintAt.command
                }
            },
            superTypes: [PrintItem.$type]
        },
        PrintItem: {
            name: PrintItem.$type,
            properties: {
            },
            superTypes: []
        },
        PrintTab: {
            name: PrintTab.$type,
            properties: {
                args: {
                    name: PrintTab.args,
                    defaultValue: []
                },
                command: {
                    name: PrintTab.command
                }
            },
            superTypes: [PrintItem.$type]
        },
        StatementAny: {
            name: StatementAny.$type,
            properties: {
            },
            superTypes: []
        },
        StatementDecl: {
            name: StatementDecl.$type,
            properties: {
            },
            superTypes: [StatementAny.$type]
        },
        StatementDim: {
            name: StatementDim.$type,
            properties: {
                command: {
                    name: StatementDim.command
                },
                dims: {
                    name: StatementDim.dims,
                    defaultValue: []
                },
                name: {
                    name: StatementDim.name
                }
            },
            superTypes: [StatementDecl.$type]
        },
        StatementFor: {
            name: StatementFor.$type,
            properties: {
                command: {
                    name: StatementFor.command
                },
                from: {
                    name: StatementFor.from
                },
                name: {
                    name: StatementFor.name
                },
                step: {
                    name: StatementFor.step
                },
                to: {
                    name: StatementFor.to
                }
            },
            superTypes: [StatementDecl.$type]
        },
        StatementIf: {
            name: StatementIf.$type,
            properties: {
                command: {
                    name: StatementIf.command
                },
                test: {
                    name: StatementIf.test
                },
                thenStatement: {
                    name: StatementIf.thenStatement
                }
            },
            superTypes: [StatementAny.$type]
        },
        StatementInput: {
            name: StatementInput.$type,
            properties: {
                command: {
                    name: StatementInput.command
                },
                indices: {
                    name: StatementInput.indices,
                    defaultValue: []
                },
                name: {
                    name: StatementInput.name
                }
            },
            superTypes: [StatementDecl.$type]
        },
        StatementJump: {
            name: StatementJump.$type,
            properties: {
                command: {
                    name: StatementJump.command
                },
                destExpr: {
                    name: StatementJump.destExpr
                },
                destLine: {
                    name: StatementJump.destLine,
                    referenceType: Line.$type
                }
            },
            superTypes: [StatementAny.$type]
        },
        StatementLet: {
            name: StatementLet.$type,
            properties: {
                command: {
                    name: StatementLet.command
                },
                indices: {
                    name: StatementLet.indices,
                    defaultValue: []
                },
                name: {
                    name: StatementLet.name
                },
                value: {
                    name: StatementLet.value
                }
            },
            superTypes: [StatementDecl.$type]
        },
        StatementNext: {
            name: StatementNext.$type,
            properties: {
                command: {
                    name: StatementNext.command
                },
                varname: {
                    name: StatementNext.varname,
                    referenceType: StatementFor.$type
                }
            },
            superTypes: [StatementAny.$type]
        },
        StatementPrint: {
            name: StatementPrint.$type,
            properties: {
                args: {
                    name: StatementPrint.args,
                    defaultValue: []
                },
                command: {
                    name: StatementPrint.command
                }
            },
            superTypes: [StatementAny.$type]
        },
        StatementRem: {
            name: StatementRem.$type,
            properties: {
                command: {
                    name: StatementRem.command
                }
            },
            superTypes: [StatementAny.$type]
        },
        StatementSimple: {
            name: StatementSimple.$type,
            properties: {
                args: {
                    name: StatementSimple.args,
                    defaultValue: []
                },
                command: {
                    name: StatementSimple.command
                }
            },
            superTypes: [StatementAny.$type]
        },
        StringLiteral: {
            name: StringLiteral.$type,
            properties: {
                value: {
                    name: StringLiteral.value
                }
            },
            superTypes: [Expression.$type]
        },
        StringSlicer: {
            name: StringSlicer.$type,
            properties: {
                from: {
                    name: StringSlicer.from
                },
                to: {
                    name: StringSlicer.to
                }
            },
            superTypes: []
        },
        StringVariable: {
            name: StringVariable.$type,
            properties: {
                indices: {
                    name: StringVariable.indices,
                    defaultValue: []
                },
                slicer: {
                    name: StringVariable.slicer
                },
                varname: {
                    name: StringVariable.varname,
                    referenceType: StatementDecl.$type
                }
            },
            superTypes: [Expression.$type]
        },
        SysFunctionCall: {
            name: SysFunctionCall.$type,
            properties: {
                command: {
                    name: SysFunctionCall.command
                }
            },
            superTypes: [Expression.$type]
        },
        UnaryExpression: {
            name: UnaryExpression.$type,
            properties: {
                op: {
                    name: UnaryExpression.op
                },
                operand: {
                    name: UnaryExpression.operand
                }
            },
            superTypes: [Expression.$type]
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new ZxbasicAstReflection();
