import { type LangiumSharedCoreServices, type Module, inject } from "langium";
import {
  createDefaultModule,
  createDefaultSharedModule,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
} from "langium/lsp";
import { type TypirLangiumServices, createTypirLangiumServices, initializeLangiumTypirServices } from "typir-langium";
import { ZxbasicGeneratedModule, ZxbasicGeneratedSharedModule } from "./generated/module.js";
import { reflection } from "./generated/ast.js";
import { ZxbasicValidator, registerValidationChecks } from "./zxbasic-validator.js";
import { ZxbasicScopeComputation } from "./zxbasic-scopecomputation.js";
import { type ZxbasicSpecifics, ZxbasicTypeSystem } from "./zxbasic-type-checking.js";
import { ZxbasicValueConverter } from "./zxbasic-valueconverter.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ZxbasicAddedServices = {
  validation: {
    ZxbasicValidator: ZxbasicValidator;
  };
  typir: TypirLangiumServices<ZxbasicSpecifics>;
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ZxbasicServices = LangiumServices & ZxbasicAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export function createZxbasicModule(shared: LangiumSharedCoreServices): Module<ZxbasicServices, PartialLangiumServices & ZxbasicAddedServices> {
  return {
    parser: { ValueConverter: () => new ZxbasicValueConverter() },
    validation: {
      ZxbasicValidator: () => new ZxbasicValidator(),
    },
    references: {
      ScopeComputation: (services) => new ZxbasicScopeComputation(services),
    },
    // For type checking with Typir, configure the Typir & Typir-Langium services in this way:
    typir: () =>
      createTypirLangiumServices(shared, reflection, new ZxbasicTypeSystem(), {
        /* customize Typir services here */
      }),
  };
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createZxbasicServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Zxbasic: ZxbasicServices;
} {
  const shared = inject(createDefaultSharedModule(context), ZxbasicGeneratedSharedModule);
  const Zxbasic = inject(createDefaultModule({ shared }), ZxbasicGeneratedModule, createZxbasicModule(shared));
  shared.ServiceRegistry.register(Zxbasic);
  initializeLangiumTypirServices(Zxbasic, Zxbasic.typir); // initialize the Typir type system once
  registerValidationChecks(Zxbasic);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, Zxbasic };
}
